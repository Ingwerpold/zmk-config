/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LEFT 1
#define RIGHT 2
#define TRI 3


&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    behaviors {
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
        combo_bsp {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp BSPC>;
        };
        
        combo_lalt {
            timeout-ms = <50>; 
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
  
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp E &kp R &kp T 					                                        &kp Y &kp U  &kp I    &kp O   &kp P 
		&bhm LGUI A &bhm LALT S &bhm LSHIFT D &bhm LCTRL F &kp G 			        	        &kp H &bhm RCTRL J &bhm RSHFT K &bhm RALT L &bhm RGUI QUOT
		&mt LSFT Z &kp X &kp C &kp V &kp B				                                        &kp N &kp M  &kp CMMA &kp DOT &mt LSFT ESC
          				                                    &kp SPC &mo LEFT  			 &kp RET &mo RIGHT 
		>;
		};

            left_layer {
		bindings = <
		&kp EXCL        &kp AT     &kp HASH     &kp DLLR            &kp PRCNT            &kp CARET    &kp AMPS  &kp STAR   &kp LPAR   &kp RPAR 
		&kp FSLH        &kp RBKT   &kp RBRC     &kp RA(NON_US_BSLH) &kp RA(Q)            &kp MINUS    &kp LBRC  &kp RA(N7) &kp RA(N0) &kp PIPE
		&kp LS(FSLH)    &kp BSLH   &kp LS(PLUS) &kp RA(MINUS)       &kp LS(NON_US_BSLH)  &kp UNDER    &kp LBKT  &kp RA(N8) &kp RA(N9) &kp NON_US_BSLH 
					                            &trans  &trans    &trans  &trans
		>;

       	    right_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3  &kp NUM_4  &kp NUM_5                 &kp NUM_6 &kp NUM_7 &kp NUM_8 &kp NUM_9 &kp NUM_0 
		&trans     &trans       &trans     &trans     &trans                    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &trans 
		&trans     &trans       &trans     &trans     &trans                    &kp HOME  &kp PG_DN &kp PG_UP &kp END   &trans 
					                                    &trans &trans 		&trans  &trans
		>;
		};
		
		};	
		
		    tri_layer {
		bindings = <
		&kp F1      &kp F2    &kp F3      &kp F4    &kp F5 			           &kp F6       &kp F7        &kp F8        &kp F9     &kp F10
		&kp F11     &kp F12   &trans      &trans    &trans  				   &trans       &kp PG_UP     &kp K_VOL_UP  &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &trans    &bootloader                &bootloader  &kp PG_DN     &kp K_VOL_DN  &trans     &trans   
					                                &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};
